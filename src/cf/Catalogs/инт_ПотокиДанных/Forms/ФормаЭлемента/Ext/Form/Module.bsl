
///////////////////////////////////////////////////////////////////////////////
// инт_ПотокиДанных.ФормаЭлемента
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ИТКВ_РедакторКодаКлиент.Инициализация(ЭтотОбъект, "РедакторКода");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("ВсегдаИспользоватьMonaco", Истина);
    ДополнительныеПараметры.Вставить("Подсказка", ТекстПодсказки());
    ИТКВ_РедакторКода.Инициализация(ЭтотОбъект, "РедакторКода", ЭтотОбъект, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
   Объект.ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
    ИТКВ_ОбщийКлиент.ОткрытьНастройки(ЭтотОбъект, ИТКВ_Перечисления.ИнструментКонсольРазработчика());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИТКВ_ПодключаемыйДокументСформирован(Элемент)
    ДополнительныеПараметры = Новый Структура("ПользовательскиеОбъекты", СобратьПользовательскиеОбъекты());
         
    ИТКВ_РедакторКодаКлиент.ДополнительнаяИнициализация(ЭтотОбъект, Элемент, ДополнительныеПараметры);
    ПодключаемыйЗагрузитьСостояниеРедактораКода();
    
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйВосстановлениеФокусаРедактора() Экспорт
	
	ИТКВ_РедакторКодаКлиент.ВосстановлениеФокусаРедактора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйЗагрузитьСостояниеРедактораКода()

	ЭлементТекст = Элементы.РедакторКода;
	
	Если ЭлементТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИТКВ_РедакторКодаКлиент.Инициализирован(ЭлементТекст) Тогда
		
		ПодключитьОбработчикОжидания("ПодключаемыйЗагрузитьСостояниеРедактораКода", 0.1, Истина);
		Возврат;
		
    КонецЕсли;
    
	ИТКВ_РедакторКодаКлиент.УстановитьДоступностьРедактирования(ЭтотОбъект, ЭлементТекст, Истина);
	ИТКВ_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, ЭлементТекст, Объект.ТекстОбработчика);
		
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
			ИмяОбработчика = "ОбработкаКодПриИзменении";
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
	ИТКВ_РедакторКодаКлиент.ОбработкаСобытий(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемаяКомандаРедакторКодаОбработчик(Команда)
	
	ДополнительныеПараметры = Новый Структура;
    //ДополнительныеПараметры.Вставить("UID", ТекущаяСтрока.UID);
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.НовыйЭлемент(ИТКВ_Перечисления.ЭлементДанныхКод());
    Данные.Вставить("Текст", ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода"));
	ДополнительныеПараметры.Вставить("Данные", Данные);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработкаКомандыРедактораКодаЗавершена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИмяКоманды = Команда.Имя;
	ИТКВ_РедакторКодаКлиент.ПодключаемыйОбработчикКоманд(ЭтотОбъект, ИмяКоманды, ОповещениеОЗавершении);
	
	Если СтрНайти(ИмяКоманды, "ЗафиксироватьИзменения") Тогда
		ИТКВ_КонсольРазработчикаДанныеКлиентСервер.СброситьОригинальныйТекст(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыРедактораКодаЗавершена(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИТКВ_РедакторКодаКлиент.СтандартныйОбработчикЗавершенияКоманды(Результат, ДополнительныеПараметры);
		
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Текст", Результат);
	ИзменяемыеПоля.Вставить("ТребуетсяПроверка", Истина);
	ИзменяемыеПоля.Вставить("Ошибка", Неопределено);
	
	ПодключаемыйЗагрузитьСостояниеРедактораКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстКод = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    
КонецПроцедуры

&НаКлиенте
Функция СобратьПользовательскиеОбъекты()
    ПользовательскиеОбъекты = Новый Структура;
    
    ПользовательскиеОбъекты.Вставить("Результат", СобратьОписаниеОжидаемогоРезультата());
    ПользовательскиеОбъекты.Вставить("ИсходныеДанные",СобратьОписаниеИсходныхДанных());
    
    Возврат ПользовательскиеОбъекты;
КонецФункции

&НаКлиенте
Функция СобратьОписаниеОжидаемогоРезультата() Экспорт;
    
   // TODO: !!!! Собирать описание ожидаемого результата, по OpenApi Схеме!!!!
   
   Результат = Новый структура;
   
   Результат.Вставить("ref", "classes.Соответствие");
   Результат.Вставить("description", "Соответствие содержащее сериализованную и подготовленную информацию, которая сможет пройти валидацию по схеме.");
   
   СтруктураПараметра = Новый Структура("ref, name, description", "catalogs.инт_ПотокиДанных", "Dataflow", "Поток данных");
   СтруктураПараметров = Новый Структура("Dataflow", СтруктураПараметра);
   Результат.Вставить("properties", СтруктураПараметров);
   
   Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СобратьОписаниеИсходныхДанных()
    Если НЕ ЗначениеЗаполнено(Объект.Пример) Тогда
    	Возврат Неопределено;
    КонецЕсли;
    
    Возврат СобратьОписаниеИсходныхДанныхНаСервереБезКонтекста(Объект.Пример);
КонецФункции

&НаСервереБезКонтекста
Функция СобратьОписаниеИсходныхДанныхНаСервереБезКонтекста(Ссылка)
    МетаданныеОбъекта = Ссылка.Метаданные();
    Части = СтрРазделить(Нрег(МетаданныеОбъекта.ПолноеИмя()), ".");
    ИмяКоллекцииMonaco = ИТКВ_РедакторКодаКлиентСерверПовтИсп.ИмяКоллекцииМетаданныхПоТипу(Части[0]);
    ИсходныеДанные = Новый Структура;
    ИсходныеДанные.Вставить("ref",СтрШаблон("%1.%2", ИмяКоллекцииMonaco, МетаданныеОбъекта.Имя));
    ИсходныеДанные.Вставить("description", "Ссылка на объект, который служит исходными данными для сообщения");
    
    Возврат ИсходныеДанные;
КонецФункции

&НаКлиенте
Процедура ПримерПриИзменении(Элемент)
    
    Объект.ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
    ИТКВ_ПодключаемыйДокументСформирован(Элементы.РедакторКода)

КонецПроцедуры

&НаСервере
Функция ТекстПодсказки()
	Возврат "Возврат результата производится через переменную ""Результат""
    |Переменная ""ИсходныеДанные"" Содержит ссылку на обрабатываемый объект. Выберите объект для примера, и вы получите контекстную подсказку основанную на типе примера.";
КонецФункции

&НаСервере
Процедура ПроверитьКодНаСервере(ТекстОбработчика)
	
	ИсходныеДанные = Объект.Пример;
	
	Если ИсходныеДанные = Неопределено ИЛИ ИсходныеДанные = "" Тогда
		Сообщить("Для проверки необходимо указать пример");
		Возврат;
	КонецЕсли;
	
	Если ТекстОбработчика <> "" Тогда
		Попытка
			Выполнить(ТекстОбработчика);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКод(Команда)

	ТекстОбработчика = ИТКВ_РедакторКодаКлиент.Текст(ЭтотОбъект, "РедакторКода");
	
	ПроверитьКодНаСервере(ТекстОбработчика);

КонецПроцедуры

#КонецОбласти
